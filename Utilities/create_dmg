#!/bin/bash

pushd "$(dirname "$0")/.." > /dev/null

#config ------------------------------------------------------------------
releaseDir="build/Release"
appPath="$releaseDir/GPG Keychain Access.app"
version=$(/usr/libexec/PlistBuddy -c "print CFBundleShortVersionString" "$appPath/Contents/Info.plist")
dmgName="GPG Keychain Access-${version}.dmg"
dmgPath="build/$dmgName"
dmgTempPath="build/temp.dmg"
volumeName="GPG Keychain Access.localized"
#-------------------------------------------------------------------------

if [[ ! -e "$appPath" ]] ;then
	echo "No release found!" >&2
	popd > /dev/null
	exit 1
fi

read -p "Create DMG? " input

if [ "x$input" == "xy" -o "x$input" == "xY" ] ;then
	# remove files from earlier execution
	echo "Remove old files"
	rm -f "$dmgTempPath"
	rm -f "$dmgPath"
	rm -rf "build/dmgTemp"


	# Create temp folder
	echo "Create temp folder"
	mkdir build/dmgTemp


	# Copy files
	echo "Copy files"
	mkdir build/dmgTemp/.background
	cp dmgResources/Background.png build/dmgTemp/.background/Background.png
	cp dmgResources/VolumeIcon.icns build/dmgTemp/.VolumeIcon.icns
	cp -r dmgResources/localized build/dmgTemp/.localized
	ln -s /Applications build/dmgTemp/Applications
	cp -PR "$appPath" build/dmgTemp/


	# Create DMG
	echo "Create DMG"
	hdiutil create -scrub -quiet -fs HFS+ -fsargs "-c c=64,a=16,e=16" -format UDRW -srcfolder build/dmgTemp -volname "$volumeName" "$dmgTempPath"


	# Mount it
	echo "Mount"
	mountInfo=$(hdiutil attach -readwrite -noverify "$dmgTempPath")

	device=$(echo "$mountInfo" | head -1 | cut -d " " -f 1)
	mountPoint=$(echo "$mountInfo" | tail -1 | sed -En 's/([^	]+[	]+){2}//p')


	# Set attributes
	echo "Set attributes"
	SetFile -a C "$mountPoint"

	osascript >/dev/null << EOT1
	tell application "Finder"
		tell disk "$volumeName"
			open
			set viewOptions to icon view options of container window
			set current view of container window to icon view
			set toolbar visible of container window to false
			set statusbar visible of container window to false
			set bounds of container window to {400, 200, 580 + 400, 320 + 200}
			set arrangement of viewOptions to not arranged
			set icon size of viewOptions to 128
			set text size of viewOptions to 13
			set background picture of viewOptions to file ".background:Background.png"

			set position of item "GPG Keychain Access.app" of container window to {160, 130}
			set position of item "Applications" of container window to {410, 130}
			update without registering applications
			close
		end tell
	end tell
EOT1

	chmod -Rf +r,go-w "$mountPoint"


	# Remove .Trashes and .fseventsd
	echo "Remove .Trashes and .fseventsd"
	rm -r "$mountPoint/.Trashes" "$mountPoint/.fseventsd"


	# Unmount it
	echo "Unmount"
	hdiutil detach -quiet "$mountPoint"


	# Convert to readonly
	echo "Convert DMG"
	hdiutil convert "$dmgTempPath" -quiet -format UDZO -imagekey zlib-level=9 -o "$dmgPath"


	# Remove temp
	echo "Cleanup"
	rm -rf build/dmgTemp
	rm -f "$dmgTempPath"


	echo -e "DMG created\n\n"
fi


read -p "Create Sparkle appcast entry? " input

if [ "x$input" == "xy" -o "x$input" == "xY" ] ;then
	PRIVATE_KEY_NAME="Sparkle GPGKeychainAccess - Private key"


	signature=$(openssl dgst -sha1 -binary < "$dmgPath" |
	  openssl dgst -dss1 -sign <(security find-generic-password -g -s "$PRIVATE_KEY_NAME" 2>&1 >/dev/null | perl -pe '($_) = /<key>NOTE<\/key>.*<string>(.*)<\/string>/; s/\\012/\n/g') |
	  openssl enc -base64)

	date=$(LC_TIME=en_US date +"%a, %d %b %G %T %z")
	size=$(stat -f "%z" "$dmgPath")


	echo -e "\n"

	cat <<EOT2
<item>
	<title>Version ${version}</title>
	<description>GPG Keychain Access Version ${version}</description>
	<sparkle:releaseNotesLink>
		http://gpgtools.github.com/GPGKeychainAccess/changelog_${version}.html
	</sparkle:releaseNotesLink>
	<pubDate>${date}</pubDate>
	<enclosure url="https://github.com/downloads/GPGTools/GPGKeychainAccess/${dmgName}"
			   sparkle:version="${version}"
			   sparkle:dsaSignature="${signature}"
			   length="${size}"
			   type="application/octet-stream" />
</item>
EOT2

	echo
fi

read -p "Create a detached signature? " input

if [ "x$input" == "xy" -o "x$input" == "xY" ] ;then
	gpg2 -bau 76D78F0500D026C4 "$dmgPath"

fi



popd > /dev/null



